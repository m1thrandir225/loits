// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Element string

const (
	ElementWater       Element = "water"
	ElementFire        Element = "fire"
	ElementEarth       Element = "earth"
	ElementWind        Element = "wind"
	ElementElectricity Element = "electricity"
	ElementMetal       Element = "metal"
)

func (e *Element) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Element(s)
	case string:
		*e = Element(s)
	default:
		return fmt.Errorf("unsupported scan type for Element: %T", src)
	}
	return nil
}

type NullElement struct {
	Element Element `json:"element"`
	Valid   bool    `json:"valid"` // Valid is true if Element is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullElement) Scan(value interface{}) error {
	if value == nil {
		ns.Element, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Element.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullElement) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Element), nil
}

type MagicRating string

const (
	MagicRatingS MagicRating = "S"
	MagicRatingA MagicRating = "A"
	MagicRatingB MagicRating = "B"
	MagicRatingC MagicRating = "C"
	MagicRatingD MagicRating = "D"
	MagicRatingF MagicRating = "F"
)

func (e *MagicRating) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MagicRating(s)
	case string:
		*e = MagicRating(s)
	default:
		return fmt.Errorf("unsupported scan type for MagicRating: %T", src)
	}
	return nil
}

type NullMagicRating struct {
	MagicRating MagicRating `json:"magic_rating"`
	Valid       bool        `json:"valid"` // Valid is true if MagicRating is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMagicRating) Scan(value interface{}) error {
	if value == nil {
		ns.MagicRating, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MagicRating.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMagicRating) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MagicRating), nil
}

type Book struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Owner     pgtype.UUID `json:"owner"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
}

type Magician struct {
	ID            uuid.UUID   `json:"id"`
	Email         string      `json:"email"`
	Password      string      `json:"password"`
	OriginalName  string      `json:"original_name"`
	MagicName     string      `json:"magic_name"`
	Birthday      time.Time   `json:"birthday"`
	MagicalRating MagicRating `json:"magical_rating"`
	UpdatedAt     time.Time   `json:"updated_at"`
	CreatedAt     time.Time   `json:"created_at"`
}

type Spell struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Element   Element     `json:"element"`
	BookID    pgtype.UUID `json:"book_id"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
}
