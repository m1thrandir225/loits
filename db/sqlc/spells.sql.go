// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: spells.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSpell = `-- name: CreateSpell :exec
INSERT INTO spells (
  name,
  element,
  owner
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, name, element, owner
`

type CreateSpellParams struct {
	Name    string      `json:"name"`
	Element Element     `json:"element"`
	Owner   pgtype.UUID `json:"owner"`
}

func (q *Queries) CreateSpell(ctx context.Context, arg CreateSpellParams) error {
	_, err := q.db.Exec(ctx, createSpell, arg.Name, arg.Element, arg.Owner)
	return err
}

const getSpellById = `-- name: GetSpellById :one
SELECT id, name, element, owner
FROM spells
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSpellById(ctx context.Context, id uuid.UUID) (Spell, error) {
	row := q.db.QueryRow(ctx, getSpellById, id)
	var i Spell
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Element,
		&i.Owner,
	)
	return i, err
}

const getSpellByName = `-- name: GetSpellByName :one
SELECT id, name, element, owner
FROM spells
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetSpellByName(ctx context.Context, name string) (Spell, error) {
	row := q.db.QueryRow(ctx, getSpellByName, name)
	var i Spell
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Element,
		&i.Owner,
	)
	return i, err
}
